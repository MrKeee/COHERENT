// Generated by gencpp from file hademo/Action.msg
// DO NOT EDIT!


#ifndef HADEMO_MESSAGE_ACTION_H
#define HADEMO_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>
#include <hademo/Func_and_Args.h>

namespace hademo
{
template <class ContainerAllocator>
struct Action_
{
  typedef Action_<ContainerAllocator> Type;

  Action_()
    : franka_0()
    , franka_1()
    , franka_2()
    , aliengo_0()
    , aliengo_1()
    , aliengo_2()
    , quadrotor_0()
    , quadrotor_1()
    , quadrotor_2()  {
    }
  Action_(const ContainerAllocator& _alloc)
    : franka_0(_alloc)
    , franka_1(_alloc)
    , franka_2(_alloc)
    , aliengo_0(_alloc)
    , aliengo_1(_alloc)
    , aliengo_2(_alloc)
    , quadrotor_0(_alloc)
    , quadrotor_1(_alloc)
    , quadrotor_2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _franka_0_type;
  _franka_0_type franka_0;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _franka_1_type;
  _franka_1_type franka_1;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _franka_2_type;
  _franka_2_type franka_2;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _aliengo_0_type;
  _aliengo_0_type aliengo_0;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _aliengo_1_type;
  _aliengo_1_type aliengo_1;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _aliengo_2_type;
  _aliengo_2_type aliengo_2;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _quadrotor_0_type;
  _quadrotor_0_type quadrotor_0;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _quadrotor_1_type;
  _quadrotor_1_type quadrotor_1;

   typedef  ::hademo::Func_and_Args_<ContainerAllocator>  _quadrotor_2_type;
  _quadrotor_2_type quadrotor_2;





  typedef boost::shared_ptr< ::hademo::Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hademo::Action_<ContainerAllocator> const> ConstPtr;

}; // struct Action_

typedef ::hademo::Action_<std::allocator<void> > Action;

typedef boost::shared_ptr< ::hademo::Action > ActionPtr;
typedef boost::shared_ptr< ::hademo::Action const> ActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hademo::Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hademo::Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hademo::Action_<ContainerAllocator1> & lhs, const ::hademo::Action_<ContainerAllocator2> & rhs)
{
  return lhs.franka_0 == rhs.franka_0 &&
    lhs.franka_1 == rhs.franka_1 &&
    lhs.franka_2 == rhs.franka_2 &&
    lhs.aliengo_0 == rhs.aliengo_0 &&
    lhs.aliengo_1 == rhs.aliengo_1 &&
    lhs.aliengo_2 == rhs.aliengo_2 &&
    lhs.quadrotor_0 == rhs.quadrotor_0 &&
    lhs.quadrotor_1 == rhs.quadrotor_1 &&
    lhs.quadrotor_2 == rhs.quadrotor_2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hademo::Action_<ContainerAllocator1> & lhs, const ::hademo::Action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hademo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hademo::Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hademo::Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hademo::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d976dee5559eb23c2568d9c0e79066c7";
  }

  static const char* value(const ::hademo::Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd976dee5559eb23cULL;
  static const uint64_t static_value2 = 0x2568d9c0e79066c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::hademo::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hademo/Action";
  }

  static const char* value(const ::hademo::Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hademo::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hademo/Func_and_Args franka_0\n"
"hademo/Func_and_Args franka_1\n"
"hademo/Func_and_Args franka_2\n"
"hademo/Func_and_Args aliengo_0\n"
"hademo/Func_and_Args aliengo_1\n"
"hademo/Func_and_Args aliengo_2\n"
"hademo/Func_and_Args quadrotor_0\n"
"hademo/Func_and_Args quadrotor_1\n"
"hademo/Func_and_Args quadrotor_2\n"
"\n"
"================================================================================\n"
"MSG: hademo/Func_and_Args\n"
"bool has_func\n"
"string func_name\n"
"hademo/Args args\n"
"\n"
"================================================================================\n"
"MSG: hademo/Args\n"
"bool has_args\n"
"string attached_prim_path\n"
"std_msgs/Float64MultiArray waypoint_pos\n"
"std_msgs/Float64MultiArray waypoint_ori\n"
"int32 waypoint_ind\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::hademo::Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hademo::Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.franka_0);
      stream.next(m.franka_1);
      stream.next(m.franka_2);
      stream.next(m.aliengo_0);
      stream.next(m.aliengo_1);
      stream.next(m.aliengo_2);
      stream.next(m.quadrotor_0);
      stream.next(m.quadrotor_1);
      stream.next(m.quadrotor_2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hademo::Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hademo::Action_<ContainerAllocator>& v)
  {
    s << indent << "franka_0: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.franka_0);
    s << indent << "franka_1: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.franka_1);
    s << indent << "franka_2: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.franka_2);
    s << indent << "aliengo_0: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.aliengo_0);
    s << indent << "aliengo_1: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.aliengo_1);
    s << indent << "aliengo_2: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.aliengo_2);
    s << indent << "quadrotor_0: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.quadrotor_0);
    s << indent << "quadrotor_1: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.quadrotor_1);
    s << indent << "quadrotor_2: ";
    s << std::endl;
    Printer< ::hademo::Func_and_Args_<ContainerAllocator> >::stream(s, indent + "  ", v.quadrotor_2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADEMO_MESSAGE_ACTION_H
