// Generated by gencpp from file hademo/ResultInfo.msg
// DO NOT EDIT!


#ifndef HADEMO_MESSAGE_RESULTINFO_H
#define HADEMO_MESSAGE_RESULTINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hademo
{
template <class ContainerAllocator>
struct ResultInfo_
{
  typedef ResultInfo_<ContainerAllocator> Type;

  ResultInfo_()
    : has_result(false)
    , success(false)
    , info()  {
    }
  ResultInfo_(const ContainerAllocator& _alloc)
    : has_result(false)
    , success(false)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _has_result_type;
  _has_result_type has_result;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::hademo::ResultInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hademo::ResultInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ResultInfo_

typedef ::hademo::ResultInfo_<std::allocator<void> > ResultInfo;

typedef boost::shared_ptr< ::hademo::ResultInfo > ResultInfoPtr;
typedef boost::shared_ptr< ::hademo::ResultInfo const> ResultInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hademo::ResultInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hademo::ResultInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hademo::ResultInfo_<ContainerAllocator1> & lhs, const ::hademo::ResultInfo_<ContainerAllocator2> & rhs)
{
  return lhs.has_result == rhs.has_result &&
    lhs.success == rhs.success &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hademo::ResultInfo_<ContainerAllocator1> & lhs, const ::hademo::ResultInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hademo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hademo::ResultInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hademo::ResultInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::ResultInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::ResultInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::ResultInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::ResultInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hademo::ResultInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc965c583533320bba311cfc20577920";
  }

  static const char* value(const ::hademo::ResultInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc965c583533320bULL;
  static const uint64_t static_value2 = 0xba311cfc20577920ULL;
};

template<class ContainerAllocator>
struct DataType< ::hademo::ResultInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hademo/ResultInfo";
  }

  static const char* value(const ::hademo::ResultInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hademo::ResultInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool has_result\n"
"bool success\n"
"string info\n"
;
  }

  static const char* value(const ::hademo::ResultInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hademo::ResultInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.has_result);
      stream.next(m.success);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResultInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hademo::ResultInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hademo::ResultInfo_<ContainerAllocator>& v)
  {
    s << indent << "has_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_result);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADEMO_MESSAGE_RESULTINFO_H
