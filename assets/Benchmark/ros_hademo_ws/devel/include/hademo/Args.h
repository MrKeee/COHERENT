// Generated by gencpp from file hademo/Args.msg
// DO NOT EDIT!


#ifndef HADEMO_MESSAGE_ARGS_H
#define HADEMO_MESSAGE_ARGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>

namespace hademo
{
template <class ContainerAllocator>
struct Args_
{
  typedef Args_<ContainerAllocator> Type;

  Args_()
    : has_args(false)
    , attached_prim_path()
    , waypoint_pos()
    , waypoint_ori()
    , waypoint_ind(0)  {
    }
  Args_(const ContainerAllocator& _alloc)
    : has_args(false)
    , attached_prim_path(_alloc)
    , waypoint_pos(_alloc)
    , waypoint_ori(_alloc)
    , waypoint_ind(0)  {
  (void)_alloc;
    }



   typedef uint8_t _has_args_type;
  _has_args_type has_args;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _attached_prim_path_type;
  _attached_prim_path_type attached_prim_path;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _waypoint_pos_type;
  _waypoint_pos_type waypoint_pos;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _waypoint_ori_type;
  _waypoint_ori_type waypoint_ori;

   typedef int32_t _waypoint_ind_type;
  _waypoint_ind_type waypoint_ind;





  typedef boost::shared_ptr< ::hademo::Args_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hademo::Args_<ContainerAllocator> const> ConstPtr;

}; // struct Args_

typedef ::hademo::Args_<std::allocator<void> > Args;

typedef boost::shared_ptr< ::hademo::Args > ArgsPtr;
typedef boost::shared_ptr< ::hademo::Args const> ArgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hademo::Args_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hademo::Args_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hademo::Args_<ContainerAllocator1> & lhs, const ::hademo::Args_<ContainerAllocator2> & rhs)
{
  return lhs.has_args == rhs.has_args &&
    lhs.attached_prim_path == rhs.attached_prim_path &&
    lhs.waypoint_pos == rhs.waypoint_pos &&
    lhs.waypoint_ori == rhs.waypoint_ori &&
    lhs.waypoint_ind == rhs.waypoint_ind;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hademo::Args_<ContainerAllocator1> & lhs, const ::hademo::Args_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hademo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hademo::Args_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hademo::Args_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::Args_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hademo::Args_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::Args_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hademo::Args_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hademo::Args_<ContainerAllocator> >
{
  static const char* value()
  {
    return "482e2fefd3fc2e17f27a0aa075e67ef3";
  }

  static const char* value(const ::hademo::Args_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x482e2fefd3fc2e17ULL;
  static const uint64_t static_value2 = 0xf27a0aa075e67ef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hademo::Args_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hademo/Args";
  }

  static const char* value(const ::hademo::Args_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hademo::Args_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool has_args\n"
"string attached_prim_path\n"
"std_msgs/Float64MultiArray waypoint_pos\n"
"std_msgs/Float64MultiArray waypoint_ori\n"
"int32 waypoint_ind\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::hademo::Args_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hademo::Args_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.has_args);
      stream.next(m.attached_prim_path);
      stream.next(m.waypoint_pos);
      stream.next(m.waypoint_ori);
      stream.next(m.waypoint_ind);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Args_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hademo::Args_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hademo::Args_<ContainerAllocator>& v)
  {
    s << indent << "has_args: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_args);
    s << indent << "attached_prim_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.attached_prim_path);
    s << indent << "waypoint_pos: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_pos);
    s << indent << "waypoint_ori: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.waypoint_ori);
    s << indent << "waypoint_ind: ";
    Printer<int32_t>::stream(s, indent + "  ", v.waypoint_ind);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HADEMO_MESSAGE_ARGS_H
