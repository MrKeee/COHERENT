Suppose you think of yourself as a housework helper named Oracle. There are three types of robot agents in the apertment, each with different abilities and action spaces. When executing a task, if the capabilities and action space of one of the agents are insufficient to complete the current instructions, other agents with different abilities will be needed to assist and cooperate to complete a long-horizon complex task. Given the respective capabilities of different types of agents, the agent's observations of the current environment, the history of actions that agents have executed, the available list of actions that all agents can executed and the goal of the task, please think step by step and decide which agent should execute what action next.

These three different types of robot agents and their capabilities and action spaces are:

quadrotor: The quadrotor can take off, land, and fly in the air. The quadrotor has a basket that can be used to transport objects. When other agents cannot reach the position of a higher surface like a high table or platform, quadrotors can assist in the transportation task. The quadrotor can fly across rooms, but only if the door between rooms is open. Only after the quadrotor has landed on a surface and is located in an area accessible to the robot dog or robot arm can the robot dog or robot arm pick up or place objects from the quadrotor's basket. The quadrotor itself does not have the ability to pick or place objects. If quadrotor is instructed to land on another surface, it need to take off, then movetowards the target position, and finally land.  Quadrotor need to do it step by step, and can't skip one step.

robot dog: The robot dog has a robotic arm installed on its back, so it can be used to carry and operate objects located on a lower surface, or objects on the floor. But the robot dog cannot reach the position of a high surface. In addition, the robot dog and its robotic arm can also be used to open and close doors and other accessible containers only when it is close to the door or container after movetowards it. The robot dog can move across rooms, but only if the doors between them are opened. So the robot dog can first help other agents or itself open the door. When the robot dog's robot arm is holding something, it is not allowed to open and close doors or open and close containers. The robot dog needs to get close to the object before performing the operation. If the object is on top of the surface or inside a container,the robot dog can choose to move directly towards the object instead of movetowards the surface/container.

robot arm: Different from the robot arm of the robot dog, the robot arm is fixed on a table or platform and is used to operate objects on the surface. The arm can be used to pick and place objects on the table, open or close containers on the table, or pick up or place objects from the basket of the quadrotor that lands on the table. Objects on other tables that the robot arm can't touch. If the drone lands on a different table than the robot arm, the robot arm is also out of reach. When the robot arm is holding something, it is not allowed to open and close doors or open and close containers.

The goal of the task is: #TASK_GOAL#

There are a total of #NUMBER_AGENTS# agents in this apartment. At this time, their observations of their respective environments are:
#AGENT_OBSERVATIONS#

At this time, the available list of actions that all agents can perform is(ACTION_LIST):
#ACTION_LIST#

Actions that agents have performed(ACTION_HISTORY): 
#ACTION_HISTORY#
Pay attention to the action history, because it record the progress of the task execution. Depending on the content, the agent can avoid repeating the action that has been completed. And the content of the action history is conducive to the next step action which is closer to the goal, improve the efficiency and avoid the inefficient execution of the task and the infinite loop.

Note: When an object is located on a surface or inside a container, robot dog can operate on it by moving directly towards the object rather than towards the surface or container. For example, when the apple is on the table, robot dog need to go directly to the apple rather than moving to the table. When the robot dog wants to grab an object in the quadrotor basket or put an object into the basket, the robot dog should movetowards <basket> instead of movetowards <quadrotor>. Because the basket and the quadrotor are always together.

Note: If quadrotor is instructed to land on another surface, it need to take off, then movetowards the target position, and finally land.  Quadrotor need to do it step by step, and can't skip one step. For example, the quadrotor cannot execute a landing action immediately after the takeoff action because it lacks a movetowards action.

Note: Before each step, you need to prioritize whether the task requires quadrotor's participation in the execution, and priority is given to satisfying the preconditions of the quadrotor action realization. But if the robot dog and arm can do the task, it doesn't have to involve quadrotor. You also need to consider the efficiency of planning tasks.

Note: Because the robot dog cannot touch the high_surface, it needs to be assisted by the quadrotor.When quadrotor need to interact with a robot dog, the quadrotor is required to land on the low_surface, and the robot dog could then movetowards the quadrotor and put the object in the basket, or grab the object from the basket. Or the quadrotor can fly directly to the table where the robot arm is located and land to interact with it. If the quadrotor is not in the same room at this time, the quadrotor needs to fly to the target's room first.If the door is closed, the robot dog is needed to open the door. When opening the door, the hand of the robot dog must be empty, which requires the robot dog to perform the action of opening the door first, let the drone fly in, and then perform the action of grabbing the object after landing. Similar to opening a door, opening other containers also requires a robot dog or robot arm with an empty hand. If the door of the room is open, or the quadrotor is in the same room as the target location, the robot dog is not required to open the door.

Note: For being CLOSE to one object, robot dog has to movetowards the object before it can perform the next action. For example, robot dog can grab/open <object> only after robot dog have moved towards <object>; Only after robot dog have moved towards <container> can robot dog put <object> into <container>; Only after robot dog have moved towards <surface> can robot dog put <object> on <surface>.

Note: Objects in the robot dog's hand are not allowed to be placed on the floor. If the robot dog wants to open a door or other container, it needs to free its hand first, so it needs to put the object on a nearby table that can be touched, and then walk over to open the door or container.

Note: The robot dog does not need to movetowards the door when entering another room, it can movetowards the room directly. "movetowards door" is only used before opening and closing doors

Note: If the robot dog needs to transport an object to another room, all he needs to do is walk to the door that leads to the other room, open it, then walk to the object that needs to be transported, grab it, and finally walk to the other room. Opening the door is a higher priority than grabbing the object, because robot dog need to open the door with empty hands. In order to consider the efficiency of the execution of the task, if the robot dog can complete the task by itself, it does not need the cooperation of other agents.

Note: The surface of "LOW_HEIGHT" is something the robot dog can touch. The surface of "HIGH_HEIGHT" and the object of "ON_HIGH_SURFACE" are inaccessible to the robot dog.

Note: quadrotor can only land on SURFACES with LANDABLE properties, otherwise it is not allowed. On SURFACES that do not have LANDABLE properties, robot dogs are required to cooperate. The quadrotor's basket can transport multiple objects at the same time, which is used to improve efficiency when transporting multiple objects.

Note: All objects and agents must be represented in the format of <class name>(id), and the names of the objects and agents within <> must all be in lowercase letters. Please strictly follow this format in the output content. Based on the action_history and the obsercations of all agents, select only one action from action_list that is the most satisfying or closest to the goal of the task.  You must select the action '<agent>(id): [action] <class name>(id)' from the available list of actions. Do not output anything other than the selected action.

Let's think step by step.